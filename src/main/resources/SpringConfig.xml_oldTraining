<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"   
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd  
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
    
 <!-- <bean id="c1" class="com.mnr.spring.Customer"/> 
     <bean id="c2" class="com.mnr.spring.Customer">
	    <property name="id" value="1" />
	    <property name="name" value="naveen" />
    </bean>  -->
    
    <!-- <bean id="c3" class="com.mnr.spring.Customer">
	    <constructor-arg value="reddy" index="1"/> 
	     <constructor-arg value="2" index="0"/>option 1
	     <constructor-arg value="naveen" type="String"/> option2  
	     <constructor-arg value="200" type="int"/>
    </bean> -->
    
    <!--composition injection method1   -->
	   <!--  <bean id="e1" class="com.mnr.spring.Employee">
	    	<property name="id" 	value="1"/>
	    	<property name="name"	value="naveen"/>
	    	<property name="vehicle" ref="v1"/>
	    </bean>
	    <bean id="v1" class="com.mnr.spring.Vehicle">
	    	<property name="id" value="1"/>
	    	<property name="model" value="FZ"/>
	    </bean> -->
    
    <!--composition injection method2(InnerBeans Concept)   -->
    
    <!-- <bean id="e1" class="com.mnr.spring.Employee">
    	<property name="id" 	value="1"/>
    	<property name="name"	value="naveen"/>
    	<property name="vehicle">
    			<bean class="com.mnr.spring.Vehicle">
    				<property name="id" value="2"/>
    				<property name="model" value="FZ-s"/>
    			</bean>
    	
    	</property>
    </bean> -->
    
     <!--composition injection method2(Constructor Injection)   -->
    <!-- <bean id="e1" class="com.mnr.spring.Employee">
    	<constructor-arg name="id" value="1"/>
    	<constructor-arg name="name" value="naveen"/>
    	<constructor-arg name="vehicle" ref="v1"/>
    </bean>
    
    <bean id="v1" class="com.mnr.spring.Vehicle">
	    	<property name="id" value="1"/>
	    	<property name="model" value="FZ"/>
	 </bean> -->
	 
	  <!-- Bean Scopes   -->
	  
	 <!--  <bean id="b1" class="com.mnr.spring.Bean" > --> <!-- here b1 by default, singleton and will be eagar loaded   -->
	   <!-- <bean id="b1" class="com.mnr.spring.Bean" scope="singleton" > --><!-- here  this will create only one object is created and same is returned everytime getBean is called from ApplicationContext	 -->
	  	<!-- <bean id="b1" class="com.mnr.spring.Bean">Each getBean call will create a new Bean object  
	  	<constructor-arg name="id" value="1"/>
	 	 <constructor-arg name="name" value="MnReddy"/>
	  </bean> -->
	  
	   <!-- Bean Factory example   -->
	  <bean id="b1" class="com.mnr.spring.Bean" scope="prototype"><!-- Each getBean call will create a new Bean object   -->
	  	<constructor-arg name="id" value="11111"/>
	 	 <constructor-arg name="name" value="BeanFactory-prototype"/>
	  </bean>
	  <bean id="b2" class="com.mnr.spring.Bean" scope="singleton"><!-- Each getBean call will create a new Bean object   -->
	  	<constructor-arg name="id" value="2222"/>
	 	 <constructor-arg name="name" value="BeanFactory-singleton"/>
	  </bean>
	  
  </beans>  